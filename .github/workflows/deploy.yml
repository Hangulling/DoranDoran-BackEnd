name: CI/CD (DoranDoran EC2)

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [ "auth", "user", "chat", "gateway", "store", "batch" ]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/dorandoran-
      SHA_TAG: ${{ github.sha }}
      DATE_TAG: ${{ github.ref_name }}-${{ github.run_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew :${{ matrix.module }}:clean :${{ matrix.module }}:bootJar

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.module }}
          file: ./${{ matrix.module }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}${{ matrix.module }}:latest
            ${{ env.IMAGE_PREFIX }}${{ matrix.module }}:${{ env.SHA_TAG }}
            ${{ env.IMAGE_PREFIX }}${{ matrix.module }}:${{ env.DATE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      SHA_TAG: ${{ github.sha }}
    
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            cd ~/dorandoran
            
            # Update image tags in .env
            sed -i "s/^AUTH_TAG=.*/AUTH_TAG=${{ env.SHA_TAG }}/" .env
            sed -i "s/^USER_TAG=.*/USER_TAG=${{ env.SHA_TAG }}/" .env
            sed -i "s/^CHAT_TAG=.*/CHAT_TAG=${{ env.SHA_TAG }}/" .env
            sed -i "s/^GATEWAY_TAG=.*/GATEWAY_TAG=${{ env.SHA_TAG }}/" .env
            sed -i "s/^STORE_TAG=.*/STORE_TAG=${{ env.SHA_TAG }}/" .env
            sed -i "s/^BATCH_TAG=.*/BATCH_TAG=${{ env.SHA_TAG }}/" .env
            
            # Pull latest images
            docker compose pull
            
            # Restart services with new images
            docker compose up -d
            
            # Remove dangling images
            docker image prune -f
            
            # Verify services are running
            echo "Waiting for services to start..."
            sleep 10
            docker compose ps
            
            # Health check
            echo "Checking service health..."
            curl -f http://localhost:8081/actuator/health || echo "Auth service health check failed"
            curl -f http://localhost:8082/actuator/health || echo "User service health check failed"
            curl -f http://localhost:8083/actuator/health || echo "Chat service health check failed"
            curl -f http://localhost:8080/actuator/health || echo "Gateway health check failed"
            curl -f http://localhost:8084/actuator/health || echo "Store service health check failed"
            curl -f http://localhost:8085/actuator/health || echo "Batch service health check failed"
