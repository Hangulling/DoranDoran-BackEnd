server:
  port: 8080

spring:
  application:
    name: api-gateway

  main:
    web-application-type: reactive

  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration

  data:
    redis:
      host: ${SPRING_REDIS_HOST:redis}
      port: ${SPRING_REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  cloud:
    gateway:
      routes:
        # Auth 서비스
        - id: auth-service
          uri: http://auth:8081
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/auth/(?<segment>.*), /${segment}

        # User 서비스
        - id: user-service
          uri: http://user:8082
          predicates:
            - Path=/api/user/**
          filters:
            - RewritePath=/api/user/(?<segment>.*), /${segment}

        # Chat 서비스
        - id: chat-service
          uri: http://chat:8083
          predicates:
            - Path=/api/chat/**
          filters:
            - RewritePath=/api/chat/(?<segment>.*), /${segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 30
                redis-rate-limiter.burstCapacity: 60

        # Batch 서비스
        - id: batch-service
          uri: http://batch:8085
          predicates:
            - Path=/api/batch/**
          filters:
            - RewritePath=/api/batch/(?<segment>.*), /${segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10

      # 전역 CORS 설정
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: true

# 로깅
logging:
  level:
    com.dorandoran.gateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
    prometheus:
      enabled: true