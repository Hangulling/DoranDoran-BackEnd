server:
  port: 8080

spring:
  application:
    name: api-gateway
  
  # 웹 애플리케이션 타입을 reactive로 설정 (Gateway용)
  main:
    web-application-type: reactive
  
  # JPA 자동 설정 비활성화
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration
  
  # Redis 설정
  data:
    redis:
      host: ${SPRING_REDIS_HOST:redis}
      port: ${SPRING_REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  cloud:
    gateway:
      routes:
        # Auth 서비스 라우팅
        - id: auth-service
          uri: http://auth-service:8081
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/auth/(?<segment>.*), /api/auth/$\{segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Origin
                value: "*"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Methods
                value: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Headers
                value: "*"
        
        # User 서비스 라우팅
        - id: user-service
          uri: http://user-service:8082
          predicates:
            - Path=/api/users/**
          filters:
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Origin
                value: "*"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Methods
                value: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Headers
                value: "*"
        
        # Chat 서비스 라우팅
        - id: chat-service
          uri: http://chat-service:8083
          predicates:
            - Path=/api/chat/**
          filters:
            # StripPrefix 제거 - 올바른 경로 매핑
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 30
                redis-rate-limiter.burstCapacity: 60
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Origin
                value: "*"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Methods
                value: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Headers
                value: "*"
        
        # Batch 서비스 라우팅
        - id: batch-service
          uri: http://batch-service:8085
          predicates:
            - Path=/api/batch/**
          filters:
            # StripPrefix 제거 - 올바른 경로 매핑
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Origin
                value: "*"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Methods
                value: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
            - name: AddResponseHeader
              args:
                name: Access-Control-Allow-Headers
                value: "*"
      
      # 글로벌 CORS 설정
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: true

# 로깅 설정
logging:
  level:
    com.dorandoran.gateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Gateway 설정
gateway:
  auth:
    base-url: http://auth-service:8081  # Docker 서비스명 사용
    validate-path: /api/auth/validate
  jwt:
    hmac-secret: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
    skew-ms: 60000

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
